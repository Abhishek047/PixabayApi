{"version":3,"sources":["components/Navigation.js","components/ImageResult.js","components/SelectOpt.js","App.js","serviceWorker.js","index.js"],"names":["navigation","title","position","Component","ImageResult","state","open","openImg","handleOpen","currentImg","console","log","setState","handleClose","displayImage","images","this","props","GridList","cellHeight","cols","component","spacing","map","img","GridListTile","id","src","largeImageURL","alt","GridListTileBar","tags","subtitle","user","actionIcon","IconButton","onClick","Dialog","DialogContent","style","width","DialogActions","Button","SelectOpt","apiURL","apiKey","image_type","search","image","searchChange","e","target","name","value","handleChange","axios","get","then","res","data","hits","catch","err","TextField","fullWidth","label","onChange","Select","MenuItem","variant","color","length","App","Fragment","Navigation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bad419fe.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport AppBar from 'material-ui/AppBar';\r\n\r\nexport class navigation extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AppBar title='Image Search' position='fixed' >\r\n                </AppBar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default navigation\r\n","import React, { Component } from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport GridList from '@material-ui/core/GridList'\r\nimport GridListTile from '@material-ui/core/GridListTile'\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ZoomIn from '@material-ui/icons/ZoomIn'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\n\r\n\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     icon : {\r\n//         color : 'white',\r\n//     },\r\n// })) ;\r\n\r\n\r\nexport default class ImageResult extends Component {\r\n\r\n        state =  {\r\n            open : false,\r\n            openImg : '',\r\n      };\r\n\r\n  handleOpen = (currentImg) => {\r\n      console.log(currentImg);\r\n     this.setState({ open : true , openImg : currentImg })\r\n  }\r\n\r\n  handleClose = () =>{\r\n      this.setState({open : false})\r\n  }\r\n\r\n    render() {        \r\n        // const mystyle = useStyles();          for custom style initiation for using \r\n        let displayImage;\r\n        const { images } = this.props;\r\n        if (images){\r\n            displayImage = (\r\n                <GridList cellHeight={300} cols ={3} component='ul' spacing={20}>\r\n                    {\r\n                     images.map((img) =>(\r\n                         <GridListTile id={img.id}>\r\n                             <img src={img.largeImageURL} alt = '' />\r\n                             <GridListTileBar \r\n                             title = {img.tags}\r\n                             subtitle= {<span> By:\r\n                                 <strong>{img.user}</strong>\r\n                             </span>}\r\n                             actionIcon={\r\n                                 <IconButton onClick= { () => this.handleOpen(img.largeImageURL) } >                           \r\n                                    {/* className={mystyle.icon}       for adding custom styles*/}\r\n                                     <ZoomIn  />\r\n                                 </IconButton>\r\n                             }\r\n                             />\r\n                         </GridListTile>\r\n                     ))\r\n                    }\r\n                </GridList>\r\n            )\r\n        }\r\n        else {\r\n            displayImage = (\r\n                <h1>\r\n                NO Image Found\r\n                </h1>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                   {displayImage}\r\n                   <Dialog\r\n                   open={this.state.open}\r\n                   >\r\n                       <DialogContent>\r\n                       <img src={this.state.openImg} alt='' style={{width: '100%' } }/>\r\n                       </DialogContent>\r\n                       <DialogActions>\r\n                           <Button onClick ={this.handleClose}>\r\n                         CLose\r\n                           </Button>\r\n                       </DialogActions>\r\n                   </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ImageResult from './ImageResult'\r\n// import { makeStyles } from '@material-ui/core/styles'\r\n\r\n\r\n// const useStyles = makeStyles({\r\n//   root: {\r\n//     background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n//     border: 0,\r\n//     borderRadius: 3,\r\n//     boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n//     color: 'white',\r\n//     height: 48,\r\n//     padding: '0 30px',\r\n//   },\r\n// });\r\n\r\nexport default class SelectOpt extends Component {\r\n    state = {\r\n        apiURL :\"https://pixabay.com/api/\",\r\n        apiKey : '18248586-c4065f40705317bbbec59ff9f',\r\n        image_type : 'all',\r\n        search : '',\r\n        image : [],\r\n      };\r\n\r\n      searchChange = (e) =>{\r\n          this.setState({[e.target.name] : e.target.value});\r\n      }\r\n      \r\n      handleChange = (e) =>{\r\n        axios.get(`${this.state.apiURL}?key=${this.state.apiKey}&q=${this.state.search}&image_type=${this.state.image_type}`)\r\n        .then( res => this.setState({ image : res.data.hits}))\r\n        .catch( err => console.log(err));\r\n      }\r\n\r\n\r\n  render() {\r\n    // const classes = useStyles();\r\n      return (\r\n          <div >\r\n           <TextField fullWidth = \"true\"  name=\"search\" value={ this.state.search } label=\"Search\"  onChange={this.searchChange}  />\r\n              <br />\r\n               <Select\r\n              name = \"image_type\"\r\n              value={this.state.image_type}\r\n              onChange={this.searchChange}\r\n              >\r\n              <MenuItem value={'all'}>All</MenuItem>\r\n              <MenuItem value={'vector'}>Vector</MenuItem>\r\n              <MenuItem value={'illustration'}>Illustration</MenuItem>\r\n              <MenuItem value={'photo'}>Photo</MenuItem>\r\n              </Select>\r\n              <br />\r\n              <Button variant=\"contained\" color=\"primary\" onClick ={this.handleChange}>Search</Button>\r\n\r\n              {this.state.image.length > 0 ? (<ImageResult images = {this.state.image} /> ) : null }\r\n\r\n          </div>\r\n      )\r\n    }\r\n}\r\n","import React from 'react';\nimport Navigation from './components/Navigation'\nimport SelectOpt from './components/SelectOpt'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n      <React.Fragment>\n        <Navigation />\n        <SelectOpt />\n      </React.Fragment>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}